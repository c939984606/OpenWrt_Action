##
name: R5S_(self_hosted)

on:
  workflow_dispatch:
  schedule:
     - cron: 0 5 * * *
     
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: diy_feeds/r5s.feeds.conf.default
  CONFIG_FILE: config/r5s
  DL_BACKUP: /home/backup/r5s/dl
  diy_scripts_plugins: diy_script/r5s/add_other_plugins.sh
  diy_scripts_optimize: diy_script/r5s/add_optimize.sh
  COMMIT_LOG_NUM: 1
  RELEASE_TAG: R5S
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  WECHAT_PUSH: true

jobs:
  build:
    runs-on: [self-hosted, linux, x64, Hetzner]
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: WECHAT_PUSH Message
      if: env.WECHAT_PUSH == 'true'
      run: |
        echo `date +'%Y-%m-%d %H:%M:%S'` > runtime.log
        starttime=$(echo `date +'%Y-%m-%d %H:%M:%S'`)
        url="https://qyapi.weixin.qq.com/cgi-bin"
        token=`curl -s "$url/gettoken?corpid=${{ secrets.ID }}&corpsecret=${{ secrets.SECRET }}"|jq -r .access_token`
        curl -s --location --request POST 'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token='"${token}"'' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "touser" : "@all",
          "msgtype" : "textcard",
          "agentid" : ${{ secrets.AGENTID }},
          "textcard" : {
            "title" : "➤➤ 编译开始: ",
            "description" : "<div class=\"highlight\">🎯 固件名称：OpenWrt '"${RELEASE_TAG}"'\n🎯 开始时间：'"${starttime}"'\n🎯 编译状态：进行中。。。 😋💐</div>",
            "url" : "https://github.com/c939984606/OpenWrt_Auto_Action/actions",
            "btntxt":"点击打开"
          },
        "enable_id_trans": 0,
        "enable_duplicate_check": 0,
        "duplicate_check_interval": 1800
        }'
        
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p /home/workdir/r5s && sudo chmod -R 777 /home/workdir/r5s
        sudo chown $USER:$GROUPS /home/workdir/r5s
        sudo rm -rf /home/workdir/r5s/*
        ls -al && df -lh
        
    - name: Clone source code
      working-directory: /home/workdir/r5s
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /home/workdir/r5s/openwrt $GITHUB_WORKSPACE/openwrt
     
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: add other plugins
      run: | 
        chmod +x $diy_scripts_plugins
        $GITHUB_WORKSPACE/$diy_scripts_plugins $GITHUB_WORKSPACE/openwrt
        
    - name: add optimize
      run: | 
        chmod +x $diy_scripts_optimize
        $GITHUB_WORKSPACE/$diy_scripts_optimize $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom configuration
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        
    - name: Download package
      id: package
      run: |
        mkdir -p $GITHUB_WORKSPACE/openwrt/dl
        cp -rf $DL_BACKUP $GITHUB_WORKSPACE/openwrt
        cd $GITHUB_WORKSPACE/openwrt
        make defconfig
        make download -j8
        cp -rf $GITHUB_WORKSPACE/openwrt/dl/* $DL_BACKUP
   
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "🎯 当前编译线程数：$(nproc)"
        make -j$(nproc)
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      run: df -hT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
      continue-on-error: true
      run: |
        cd openwrt/bin/targets/rockchip/armv8
        rm -rf packages  
        sudo apt-get -y install s3fs python3-pip
        sudo pip install aliyunpan
        mkdir -p upload_tmp/R5S/$(date +%Y%m%d)
        find . -type f -name "*rootfs*" -print0 | xargs -0r rm  
        find . -type f -name "*.gz" | xargs cp -t ./upload_tmp/R5S/$(date +%Y%m%d)
        cp -rf $GITHUB_WORKSPACE/openwrt/bin/packages ./upload_tmp/R5S/$(date +%Y%m%d)
        mkdir -p upload
        # 🎯 上传到 Minio
        #echo "${{ secrets.password }}" > ./passwd-s3fs
        #chmod 600 ./passwd-s3fs
        #s3fs nas ./upload -o passwd_file=./passwd-s3fs -o url=${{ secrets.miniourl }} -o use_path_request_style -o umask=0000
        #rm -rf ./passwd-s3fs
        #cp -rf ./upload_tmp/* ./upload/OpenWrt
        #sudo umount -f $PWD/upload
        echo
        # 🎯 上传到阿里云盘
        echo -e "🚩   开始同步固件到阿里云网盘：/Share/Frimware/OpenWrt_Auto_Action 目录"
        refresh_token=`curl -s ${{ secrets.refresh_token }}|awk -F ':' '{print $2}'`
        echo -e "refresh_token: '$refresh_token'"  >  ~/.config/aliyunpan.yaml
        aliyunpan-cli upload upload_tmp/*  /Share/Frimware/OS/Router/OpenWrt
        echo        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
      
    - name: Upload firmware directory
      if: steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: success() && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "::set-output name=release_tag::$RELEASE_TAG-$(date +"%Y.%m.%d-%H%M")"
        echo "## Update content" >> release.txt
        echo "<details> <summary> 🎯  Lean Openwrt Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt
        echo -e "> $(git -C openwrt log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt
        
        echo "<details> <summary> 🎯  Lean Package Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt        
        echo -e "> $(git -C openwrt/feeds/packages log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt
        
        echo "<details> <summary> 🎯  Lean Luci Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/luci log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> 🎯  Openwrt routing Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/routing log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> 🎯  Openwrt telephony Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/telephony log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> 🎯  SSRP Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/helloworld log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        
        echo "<details> <summary> 🎯  Passwall Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
        echo "<br>" >> release.txt
        echo "" >> release.txt 
        echo -e "> $(git -C openwrt/feeds/passwall_luci log -n $COMMIT_LOG_NUM)" >> release.txt
        echo "" >> release.txt
        echo "</details>" >> release.txt 
        echo "::set-output name=status::success"
        
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 2
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: smallprogram/delete-older-releases@v0.2.1
      if: success() && env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 8
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
               
    - name: WECHAT_PUSH Message
      if: env.WECHAT_PUSH == 'true'
      run: |
        starttime=$(cat runtime.log)
        endtime=$(echo `date +'%Y-%m-%d %H:%M:%S'`)
        start_seconds=$(date --date="$starttime" +%s)
        end_seconds=$(date --date="$endtime" +%s)
        SEC=$((end_seconds-start_seconds))
        s=$(echo $(( (SEC % 3600) % 60 ))秒)
        m=$(echo $(( (SEC % 3600) / 60 ))分)
        h=$(echo $(( SEC / 3600 ))小时)
        url="https://qyapi.weixin.qq.com/cgi-bin"
        token=`curl -s "$url/gettoken?corpid=${{ secrets.ID }}&corpsecret=${{ secrets.SECRET }}"|jq -r .access_token`
        curl --location --request POST 'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token='"${token}"'' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "touser" : "@all",
          "msgtype" : "textcard",
          "agentid" : ${{ secrets.AGENTID }},
          "textcard" : {
            "title" : "➤➤ 编译完成: ",
            "description" : "<div class=\"highlight\">🎯 固件名称：OpenWrt '"${RELEASE_TAG}"'\n🎯 结束时间：'"${endtime}"'\n🎯 编译用时：'"${h}"''"${m}"''"${s}"'\n🎯 编译状态：Success✅ 😋💐</div>",
            "url" : "'"${{ secrets.downloadurl }}"'",
            "btntxt":"点击打开"
          },
        "enable_id_trans": 0,
        "enable_duplicate_check": 0,
        "duplicate_check_interval": 1800
        }'     
